FROM {{ config.base_image }}

MAINTAINER Haowen Xu <haowen.xu@outlook.com>

ARG MAKE_ARGS=-j2
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV SHELL=/bin/bash
ENV RUNTIME_VARIANT={{ config.variant }}

{% if config.variant == "gpu" %}
ENV LD_LIBRARY_PATH="/usr/local/nvidia/lib64:/usr/local/nvidia/lib:/usr/local/cuda/lib64:/usr/local/cuda/lib:${LD_LIBRARY_PATH}"
  # lock the versions of cuda and libcudnn, such that TensorFlow + cudnn can work properly
RUN apt-get -y update && apt-mark hold cuda* libcudnn*
{% endif %}

# Basic configuration of the system, and build dependencies
RUN chsh -s /bin/bash && \
    DEBIAN_FRONTEND=noninteractive apt-get -y update && \
    DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        locales language-pack-en tzdata ca-certificates lsb-release iputils-ping \
        apt-utils apt-transport-https gnupg dirmngr openssl software-properties-common  \
        tar wget ssh git mercurial vim openssh-client psmisc rsync \
        build-essential autoconf libtool \
        libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev \
        libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev tk-dev \
        libnlopt-dev libpq-dev libffi-dev libcairo-dev libedit-dev \
        libcurl4-nss-dev libsasl2-dev libsasl2-modules libapr1-dev libsvn-dev \
        python-dev python-pip \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Build and install Python
RUN wget -O /tmp/Python-{{ config.python_version }}.tgz https://www.python.org/ftp/python/{{ config.python_version }}/Python-{{ config.python_version }}.tgz && \
        cd /tmp && tar -xzf Python-{{ config.python_version }}.tgz && \
        cd Python-{{ config.python_version }} && \
        ./configure --enable-optimizations > /dev/null && \
        make ${MAKE_ARGS} && \
        make altinstall && \
        rm /tmp/Python-{{ config.python_version }}.tgz && \
        rm -rf /tmp/Python-{{ config.python_version }} && \
    ln -sf /usr/local/bin/python{{ config.python_tag }} /usr/local/bin/python && \
    ln -sf /usr/local/bin/python{{ config.python_tag }} /usr/local/bin/python3 && \
    ln -sf /usr/local/bin/pip{{ config.python_tag }} /usr/local/bin/pip && \
    ln -sf /usr/local/bin/pip{{ config.python_tag }} /usr/local/bin/pip3
RUN python --version && \
    python -m pip --version && \
    python -m pip install --no-cache-dir --upgrade setuptools pip six virtualenv && \
    rm -rf /root/.cache
ENV PYTHON_2=/usr/bin/python2.7
ENV PYTHON_3=/usr/local/bin/python{{ config.python_tag }}

# Install OpenJDK
RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-overwrite" install -y --no-install-recommends \
        {{ config.jdk_package }} \
    && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        maven \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
ENV JAVA_HOME="{{ config.java_home }}"
ENV PATH="{{ config.java_home }}/bin:/usr/local/bin:${PATH}"

# Install R Language
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 51716619E084DAB9 && \
    add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -c -s)-cran35/" && \
    DEBIAN_FRONTEND=noninteractive apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        r-base r-base-dev \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
RUN python --version && \
    python -m pip --version && \
    python -m pip install --no-cache-dir --upgrade rpy2 && \
    rm -rf /root/.cache

# Install scala and sbt
RUN wget -O /tmp/scala-{{ config.scala_version }}.deb https://www.scala-lang.org/files/archive/scala-{{ config.scala_version }}.deb && \
    dpkg -i /tmp/scala-{{ config.scala_version }}.deb && \
    rm /tmp/scala-{{ config.scala_version }}.deb && \
    echo "deb https://dl.bintray.com/sbt/debian /" > /etc/apt/sources.list.d/sbt.list && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 && \
    DEBIAN_FRONTEND=noninteractive apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y -f --no-install-recommends && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        sbt \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install the entry script
COPY entry.sh /
ENTRYPOINT ["/entry.sh"]
